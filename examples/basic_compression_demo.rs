//! –ë–∞–∑–æ–≤–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∂–∞—Ç–∏—è üéØ
//!
//! –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
//! - –ü—Ä–æ—Å—Ç–æ–µ —Å–∂–∞—Ç–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
//! - –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∂–∞—Ç–∏—è
//! - –†–∞–±–æ—Ç—É —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö

use arithmetic_compression_wizard::prelude::*;
use arithmetic_compression_wizard::statistics::analyze_compression;

fn main() {
    println!("üßô‚Äç‚ôÇÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∂–∞—Ç–∏—è\n");

    // –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
    demo_text_compression();

    // –ü—Ä–∏–º–µ—Ä 2: –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ
    demo_repetitive_data();

    // –ü—Ä–∏–º–µ—Ä 3: –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    demo_binary_data();

    // –ü—Ä–∏–º–µ—Ä 4: –†–µ–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º
    demo_analysis();

    println!("‚ú® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
}

/// –°–∂–∞—Ç–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
fn demo_text_compression() {
    println!("üìù –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç");

    let original_text = b"Hello, world! This is a demonstration of arithmetic compression in Rust.";

    // –°–∂–∏–º–∞–µ–º
    let compressed = compress_data(original_text);

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    let restored = decompress_data(compressed.clone());

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    assert_eq!(original_text.as_slice(), restored.as_slice());

    println!("   –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {} –±–∞–π—Ç", original_text.len());
    println!("   –°–∂–∞—Ç—ã–π —Ä–∞–∑–º–µ—Ä:   {} –±–∞–π—Ç", compressed.len());
    println!(
        "   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:     {:.1}%",
        (1.0 - compressed.len() as f64 / original_text.len() as f64) * 100.0
    );
    println!("   ‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n");
}

/// –°–∂–∞—Ç–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö
fn demo_repetitive_data() {
    println!("üîÑ –ü—Ä–∏–º–µ—Ä 2: –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ");

    let repetitive_data = b"aaaaaabbbbbbccccccddddddeeeeeeffffffgggggg";

    let compressed = compress_data(repetitive_data);
    let restored = decompress_data(compressed.clone());

    assert_eq!(repetitive_data.as_slice(), restored.as_slice());

    println!("   –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {} –±–∞–π—Ç", repetitive_data.len());
    println!("   –°–∂–∞—Ç—ã–π —Ä–∞–∑–º–µ—Ä:   {} –±–∞–π—Ç", compressed.len());
    println!(
        "   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:     {:.1}%",
        (1.0 - compressed.len() as f64 / repetitive_data.len() as f64) * 100.0
    );
    println!("   ‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö\n");
}

/// –°–∂–∞—Ç–∏–µ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
fn demo_binary_data() {
    println!("üì¶ –ü—Ä–∏–º–µ—Ä 3: –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");

    let binary_data: Vec<u8> = (0..=255).cycle().take(100).collect();

    let compressed = compress_data(&binary_data);
    let restored = decompress_data(compressed.clone());

    assert_eq!(binary_data.as_slice(), restored.as_slice());

    println!("   –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {} –±–∞–π—Ç", binary_data.len());
    println!("   –°–∂–∞—Ç—ã–π —Ä–∞–∑–º–µ—Ä:   {} –±–∞–π—Ç", compressed.len());
    println!(
        "   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:     {:.1}%",
        (1.0 - compressed.len() as f64 / binary_data.len() as f64) * 100.0
    );
    println!("   ‚úÖ –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n");
}

/// –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∂–∞—Ç–∏—è
fn demo_analysis() {
    println!("üìä –ü—Ä–∏–º–µ—Ä 4: –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏");

    let sample_text = b"the quick brown fox jumps over the lazy dog. \
                       the quick brown fox jumps over the lazy dog. \
                       the quick brown fox jumps over the lazy dog. \
                       the quick brown fox jumps over the lazy dog. \
                       the quick brown fox jumps over the lazy dog.";

    let analysis = analyze_compression(sample_text);

    println!("   –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä:     {} –±–∞–π—Ç", analysis.original_size);
    println!("   –°–∂–∞—Ç—ã–π —Ä–∞–∑–º–µ—Ä:       {} –±–∞–π—Ç", analysis.compressed_size);
    println!("   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è:  {:.1}%", analysis.compression_ratio);
    println!(
        "   –≠–Ω—Ç—Ä–æ–ø–∏—è –®–µ–Ω–Ω–æ–Ω–∞:    {:.2} –±–∏—Ç/—Å–∏–º–≤–æ–ª",
        analysis.shannon_entropy
    );
    println!(
        "   –ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Å–∂–∞—Ç–∏—è:    {:.2} –±–∏—Ç/—Å–∏–º–≤–æ–ª",
        analysis.compression_density
    );
    println!("   –°–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ:      {}", analysis.word_dictionary_size);

    println!("   –¢–æ–ø —Å–∏–º–≤–æ–ª–æ–≤:");
    for (symbol, freq) in analysis.top_symbols.iter().take(5) {
        if *symbol < 256 {
            println!("     '{}': {} —Ä–∞–∑", *symbol as u8 as char, freq);
        } else {
            println!("     [—Å–ª–æ–≤–æ {}]: {} —Ä–∞–∑", symbol - 256, freq);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    let compressed = compress_data(sample_text);
    let restored = decompress_data(compressed);
    assert_eq!(sample_text.as_slice(), restored.as_slice());
    println!("   ‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã\n");
}

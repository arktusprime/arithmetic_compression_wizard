//! –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∂–∞—Ç–∏—è —Ñ–∞–π–ª–æ–≤ üìÅ
//!
//! –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
//! - –°–∂–∞—Ç–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
//! - –†–∞–±–æ—Ç—É —Å –±–æ–ª—å—à–∏–º–∏ –æ–±—ä–µ–º–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
//! - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
//! - –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

use arithmetic_compression_wizard::prelude::*;
use arithmetic_compression_wizard::statistics::analyze_compression;
use std::fs;
use std::io::{self, Write};
use std::time::Instant;

fn main() -> io::Result<()> {
    println!("üìÅ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∂–∞—Ç–∏—è —Ñ–∞–π–ª–æ–≤\n");

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    create_test_files()?;

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∂–∞—Ç–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
    demo_text_file()?;
    demo_structured_data()?;
    demo_performance_test()?;

    println!("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...");
    cleanup_test_files()?;

    println!("‚ú® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    Ok(())
}

/// –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
fn create_test_files() -> io::Result<()> {
    println!("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...");

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    let text_content = "Rust - —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, \
                       –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –±—ã—Å—Ç—Ä–æ, \
                       –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ \
                       –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å. \
                       Rust –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω—É–ª–µ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π, \
                       –ø–µ—Ä–µ–º–µ—â–∞—é—â—É—é —Å–µ–º–∞–Ω—Ç–∏–∫—É, –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏, \
                       –ø–æ—Ç–æ–∫–∏ –±–µ–∑ –≥–æ–Ω–æ–∫ –¥–∞–Ω–Ω—ã—Ö, –æ–±–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞–∂–µ–π, \
                       —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –æ–±—Ä–∞–∑—Ü–æ–º, –≤—ã–≤–æ–¥ —Ç–∏–ø–æ–≤, \
                       –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ä–µ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ C-–ø—Ä–∏–≤—è–∑–∫–∏.";

    fs::write("test_text.txt", text_content.repeat(50))?;

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (JSON-–ø–æ–¥–æ–±–Ω—ã–µ)
    let mut structured_data = String::new();
    for i in 0..100 {
        structured_data.push_str(&format!(
            "{{\"id\": {}, \"name\": \"user_{}\", \"email\": \"user_{}@example.com\", \"active\": true}}\n",
            i, i, i
        ));
    }
    fs::write("test_data.json", structured_data)?;

    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
    let pattern = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".repeat(200);
    fs::write("test_pattern.txt", pattern)?;

    println!("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã\n");
    Ok(())
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∂–∞—Ç–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
fn demo_text_file() -> io::Result<()> {
    println!("üìñ –°–∂–∞—Ç–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞");

    let filename = "test_text.txt";
    let original_data = fs::read(filename)?;

    println!("   –§–∞–π–ª: {}", filename);
    println!("   –†–∞–∑–º–µ—Ä: {} –±–∞–π—Ç", original_data.len());

    // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–∂–∞—Ç–∏—è
    let start = Instant::now();
    let compressed = compress_data(&original_data);
    let compression_time = start.elapsed();

    // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏
    let start = Instant::now();
    let restored = decompress_data(compressed.clone());
    let decompression_time = start.elapsed();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    assert_eq!(original_data, restored);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª
    let compressed_filename = "test_text.txt.compressed";
    fs::write(compressed_filename, &compressed)?;

    println!("   –°–∂–∞—Ç—ã–π —Ä–∞–∑–º–µ—Ä: {} –±–∞–π—Ç", compressed.len());
    println!(
        "   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {:.1}%",
        (1.0 - compressed.len() as f64 / original_data.len() as f64) * 100.0
    );
    println!("   –í—Ä–µ–º—è —Å–∂–∞—Ç–∏—è: {:?}", compression_time);
    println!("   –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {:?}", decompression_time);
    println!("   ‚úÖ –§–∞–π–ª —Å–∂–∞—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n");

    Ok(())
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∂–∞—Ç–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
fn demo_structured_data() -> io::Result<()> {
    println!("üóÇÔ∏è –°–∂–∞—Ç–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");

    let filename = "test_data.json";
    let original_data = fs::read(filename)?;

    println!("   –§–∞–π–ª: {}", filename);
    println!("   –†–∞–∑–º–µ—Ä: {} –±–∞–π—Ç", original_data.len());

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    let analysis = analyze_compression(&original_data);

    println!(
        "   –≠–Ω—Ç—Ä–æ–ø–∏—è –®–µ–Ω–Ω–æ–Ω–∞: {:.2} –±–∏—Ç/—Å–∏–º–≤–æ–ª",
        analysis.shannon_entropy
    );
    println!(
        "   –ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Å–∂–∞—Ç–∏—è: {:.2} –±–∏—Ç/—Å–∏–º–≤–æ–ª",
        analysis.compression_density
    );
    println!("   –°–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {}", analysis.word_dictionary_size);

    // –°–∂–∏–º–∞–µ–º
    let compressed = compress_data(&original_data);
    let restored = decompress_data(compressed.clone());

    assert_eq!(original_data, restored);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    fs::write("test_data.json.compressed", &compressed)?;

    println!("   –°–∂–∞—Ç—ã–π —Ä–∞–∑–º–µ—Ä: {} –±–∞–π—Ç", compressed.len());
    println!(
        "   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {:.1}%",
        (1.0 - compressed.len() as f64 / original_data.len() as f64) * 100.0
    );
    println!("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã\n");

    Ok(())
}

/// –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
fn demo_performance_test() -> io::Result<()> {
    println!("‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");

    let filename = "test_pattern.txt";
    let original_data = fs::read(filename)?;

    println!("   –§–∞–π–ª: {}", filename);
    println!("   –†–∞–∑–º–µ—Ä: {} –±–∞–π—Ç", original_data.len());

    // –ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    let iterations = 5;
    let mut total_compression_time = std::time::Duration::new(0, 0);
    let mut total_decompression_time = std::time::Duration::new(0, 0);
    let mut compressed_size = 0;

    print!("   –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è {} –∏—Ç–µ—Ä–∞—Ü–∏–π", iterations);
    io::stdout().flush()?;

    for _i in 0..iterations {
        print!(".");
        io::stdout().flush()?;

        // –°–∂–∞—Ç–∏–µ
        let start = Instant::now();
        let compressed = compress_data(&original_data);
        total_compression_time += start.elapsed();
        compressed_size = compressed.len();

        // –î–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏—è
        let start = Instant::now();
        let restored = decompress_data(compressed);
        total_decompression_time += start.elapsed();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
        assert_eq!(original_data, restored);
    }

    println!();

    let avg_compression = total_compression_time / iterations;
    let avg_decompression = total_decompression_time / iterations;

    println!("   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–∂–∞—Ç–∏—è: {:?}", avg_compression);
    println!("   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {:?}", avg_decompression);
    println!(
        "   –°–∫–æ—Ä–æ—Å—Ç—å —Å–∂–∞—Ç–∏—è: {:.2} –ú–ë/—Å",
        (original_data.len() as f64 / 1_000_000.0) / avg_compression.as_secs_f64()
    );
    println!(
        "   –°–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {:.2} –ú–ë/—Å",
        (original_data.len() as f64 / 1_000_000.0) / avg_decompression.as_secs_f64()
    );
    println!(
        "   –ò—Ç–æ–≥–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {:.1}%",
        (1.0 - compressed_size as f64 / original_data.len() as f64) * 100.0
    );
    println!("   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω\n");

    Ok(())
}

/// –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
fn cleanup_test_files() -> io::Result<()> {
    let files_to_remove = [
        "test_text.txt",
        "test_text.txt.compressed",
        "test_data.json",
        "test_data.json.compressed",
        "test_pattern.txt",
    ];

    for file in &files_to_remove {
        if let Err(_) = fs::remove_file(file) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        }
    }

    Ok(())
}

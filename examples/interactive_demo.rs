//! –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∂–∞—Ç–∏—è üéÆ
//!
//! –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
//! - –í–≤–æ–¥–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∂–∞—Ç–∏—è
//! - –°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
//! - –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
//! - –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

use arithmetic_compression_wizard::prelude::*;
use arithmetic_compression_wizard::statistics::analyze_compression;
use std::io::{self, Write};

fn main() {
    println!("üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∂–∞—Ç–∏—è");
    println!("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    println!();

    loop {
        show_menu();

        let choice = get_user_input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-5): ");

        match choice.trim() {
            "1" => demo_custom_text(),
            "2" => demo_text_comparison(),
            "3" => demo_entropy_analysis(),
            "4" => demo_compression_limits(),
            "5" => {
                println!("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
                break;
            }
            _ => println!("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"),
        }
    }
}

/// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
fn show_menu() {
    println!("üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:");
    println!("  1Ô∏è‚É£  –°–∂–∞—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç");
    println!("  2Ô∏è‚É£  –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ç–µ–∫—Å—Ç–∞");
    println!("  3Ô∏è‚É£  –ê–Ω–∞–ª–∏–∑ —ç–Ω—Ç—Ä–æ–ø–∏–∏");
    println!("  4Ô∏è‚É£  –ü—Ä–µ–¥–µ–ª—ã —Å–∂–∞—Ç–∏—è");
    println!("  5Ô∏è‚É£  –í—ã—Ö–æ–¥");
    println!();
}

/// –ü–æ–ª—É—á–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
fn get_user_input(prompt: &str) -> String {
    print!("{}", prompt);
    io::stdout().flush().unwrap();

    let mut input = String::new();
    io::stdin().read_line(&mut input).unwrap();
    input
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∂–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
fn demo_custom_text() {
    println!("\nüìù –°–∂–∞—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞");
    println!("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");

    let text = get_user_input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∂–∞—Ç–∏—è: ");
    let text_bytes = text.trim().as_bytes();

    if text_bytes.is_empty() {
        println!("‚ùå –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.\n");
        return;
    }

    println!("\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∂–∞—Ç–∏–µ...");

    // –°–∂–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç
    let compressed = compress_data(text_bytes);
    let restored = decompress_data(compressed.clone());

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    let is_correct = text_bytes == restored.as_slice();

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    println!("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:");
    println!("   –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä:    {} –±–∞–π—Ç", text_bytes.len());
    println!("   –°–∂–∞—Ç—ã–π —Ä–∞–∑–º–µ—Ä:      {} –±–∞–π—Ç", compressed.len());

    if text_bytes.len() > 0 {
        let ratio = (1.0 - compressed.len() as f64 / text_bytes.len() as f64) * 100.0;
        println!("   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: {:.1}%", ratio);

        if ratio > 0.0 {
            println!("   üéâ –°–∂–∞—Ç–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!");
        } else {
            println!("   üìà –î–∞–Ω–Ω—ã–µ —É–≤–µ–ª–∏—á–∏–ª–∏—Å—å (–Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã)");
        }
    }

    println!(
        "   –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:       {}",
        if is_correct { "‚úÖ" } else { "‚ùå" }
    );

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π
    if text_bytes.len() > 20 {
        let analysis = analyze_compression(text_bytes);
        println!("\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:");
        println!(
            "   –≠–Ω—Ç—Ä–æ–ø–∏—è –®–µ–Ω–Ω–æ–Ω–∞:  {:.2} –±–∏—Ç/—Å–∏–º–≤–æ–ª",
            analysis.shannon_entropy
        );
        println!(
            "   –ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Å–∂–∞—Ç–∏—è:  {:.2} –±–∏—Ç/—Å–∏–º–≤–æ–ª",
            analysis.compression_density
        );
        println!("   –°–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ:    {}", analysis.word_dictionary_size);

        if analysis.word_dictionary_size > 0 {
            println!("   üí° –ù–∞–π–¥–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞ - —Ö–æ—Ä–æ—à–æ –¥–ª—è —Å–∂–∞—Ç–∏—è!");
        }
    }

    println!();
}

/// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ–∫—Å—Ç–∞
fn demo_text_comparison() {
    println!("\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ç–µ–∫—Å—Ç–∞");
    println!("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");

    let test_cases = vec![
        (
            "–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è",
            "aaaaaabbbbbbccccccddddddeeeeee".to_string(),
        ),
        ("–°–ª—É—á–∞–π–Ω—ã–π", generate_random_text(30)),
        (
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
            r#"{"name":"user","id":123,"active":true}"#.repeat(3),
        ),
        (
            "–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π",
            "Rust - –æ—Ç–ª–∏—á–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.".to_string(),
        ),
    ];

    println!("–¢–∏–ø —Ç–µ–∫—Å—Ç–∞        | –†–∞–∑–º–µ—Ä | –°–∂–∞—Ç–æ | –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç | –≠–Ω—Ç—Ä–æ–ø–∏—è");
    println!("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ|‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ|‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ|‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ|‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");

    for (name, text) in test_cases {
        let text_bytes = text.as_bytes();
        let compressed = compress_data(text_bytes);
        let analysis = analyze_compression(text_bytes);

        let ratio = if text_bytes.len() > 0 {
            (1.0 - compressed.len() as f64 / text_bytes.len() as f64) * 100.0
        } else {
            0.0
        };

        println!(
            "{:<17}| {:>6} | {:>5} | {:>9.1}% | {:>7.2}",
            name,
            text_bytes.len(),
            compressed.len(),
            ratio,
            analysis.shannon_entropy
        );
    }

    println!("\nüí° –ù–∞–±–ª—é–¥–µ–Ω–∏—è:");
    println!("   ‚Ä¢ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ —Å–∂–∏–º–∞—é—Ç—Å—è –ª—É—á—à–µ –≤—Å–µ–≥–æ");
    println!("   ‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ —Å–∂–∏–º–∞—é—Ç—Å—è");
    println!("   ‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å—Ä–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã");
    println!("   ‚Ä¢ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ –æ–±—ã—á–Ω–æ —Ö–æ—Ä–æ—à–æ —Å–∂–∏–º–∞–µ—Ç—Å—è\n");
}

/// –ê–Ω–∞–ª–∏–∑ —ç–Ω—Ç—Ä–æ–ø–∏–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
fn demo_entropy_analysis() {
    println!("\nüßÆ –ê–Ω–∞–ª–∏–∑ —ç–Ω—Ç—Ä–æ–ø–∏–∏ –®–µ–Ω–Ω–æ–Ω–∞");
    println!("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");

    let text = get_user_input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–Ω—Ç—Ä–æ–ø–∏–∏: ");
    let text_bytes = text.trim().as_bytes();

    if text_bytes.is_empty() {
        println!("‚ùå –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.\n");
        return;
    }

    let analysis = analyze_compression(text_bytes);

    println!("\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:");
    println!("   –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞:      {} –±–∞–π—Ç", text_bytes.len());
    println!(
        "   –≠–Ω—Ç—Ä–æ–ø–∏—è –®–µ–Ω–Ω–æ–Ω–∞:   {:.3} –±–∏—Ç/—Å–∏–º–≤–æ–ª",
        analysis.shannon_entropy
    );
    println!(
        "   –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∏–Ω–∏–º—É–º: {:.1} –±–∞–π—Ç",
        text_bytes.len() as f64 * analysis.shannon_entropy / 8.0
    );

    // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —ç–Ω—Ç—Ä–æ–ø–∏–∏
    let entropy_class = match analysis.shannon_entropy {
        e if e < 2.0 => "üîµ –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è (–æ—Ç–ª–∏—á–Ω–æ —Å–∂–∏–º–∞–µ—Ç—Å—è)",
        e if e < 4.0 => "üü¢ –ù–∏–∑–∫–∞—è (—Ö–æ—Ä–æ—à–æ —Å–∂–∏–º–∞–µ—Ç—Å—è)",
        e if e < 6.0 => "üü° –°—Ä–µ–¥–Ω—è—è (—É–º–µ—Ä–µ–Ω–Ω–æ —Å–∂–∏–º–∞–µ—Ç—Å—è)",
        e if e < 7.0 => "üü† –í—ã—Å–æ–∫–∞—è (–ø–ª–æ—Ö–æ —Å–∂–∏–º–∞–µ—Ç—Å—è)",
        _ => "üî¥ –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è (–ø–æ—á—Ç–∏ –Ω–µ —Å–∂–∏–º–∞–µ—Ç—Å—è)",
    };

    println!("   –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:      {}", entropy_class);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø —Å–∏–º–≤–æ–ª–æ–≤
    println!("\nüî§ –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã:");
    for (symbol, freq) in analysis.top_symbols.iter().take(5) {
        if *symbol < 256 {
            let ch = *symbol as u8 as char;
            if ch.is_ascii_graphic() || ch == ' ' {
                println!("     '{}': {} —Ä–∞–∑", ch, freq);
            } else {
                println!("     [{}]: {} —Ä–∞–∑", symbol, freq);
            }
        } else {
            println!("     [—Å–ª–æ–≤–æ {}]: {} —Ä–∞–∑", symbol - 256, freq);
        }
    }

    println!();
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–µ–ª–æ–≤ —Å–∂–∞—Ç–∏—è
fn demo_compression_limits() {
    println!("\nüéØ –ü—Ä–µ–¥–µ–ª—ã —Å–∂–∞—Ç–∏—è");
    println!("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");

    println!("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:\n");

    let sizes = vec![10, 50, 100, 500, 1000];

    for size in sizes {
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏ (—Ö–æ—Ä–æ—à–æ —Å–∂–∏–º–∞–µ—Ç—Å—è)
        let repetitive_text = "Rust ".repeat(size / 5);
        let rep_bytes = repetitive_text.as_bytes();
        let rep_compressed = compress_data(rep_bytes);

        // –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–ª–æ—Ö–æ —Å–∂–∏–º–∞–µ—Ç—Å—è)
        let random_text = generate_pseudo_random_text(size);
        let rand_bytes = random_text.as_bytes();
        let rand_compressed = compress_data(rand_bytes);

        let rep_ratio = if rep_bytes.len() > 0 {
            (1.0 - rep_compressed.len() as f64 / rep_bytes.len() as f64) * 100.0
        } else {
            0.0
        };

        let rand_ratio = if rand_bytes.len() > 0 {
            (1.0 - rand_compressed.len() as f64 / rand_bytes.len() as f64) * 100.0
        } else {
            0.0
        };

        println!("üìè –†–∞–∑–º–µ—Ä {} –±–∞–π—Ç:", size);
        println!("   –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è: {:.1}% —Å–∂–∞—Ç–∏—è", rep_ratio);
        println!("   –°–ª—É—á–∞–π–Ω—ã–π:     {:.1}% —Å–∂–∞—Ç–∏—è", rand_ratio);
        println!();
    }

    println!("üí° –í—ã–≤–æ–¥—ã:");
    println!("   ‚Ä¢ –ú–∞–ª–µ–Ω—å–∫–∏–µ —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è –∏–∑-–∑–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤");
    println!("   ‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç —Å —Ä–∞–∑–º–µ—Ä–æ–º —Ñ–∞–π–ª–∞");
    println!("   ‚Ä¢ –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n");
}

/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
fn generate_random_text(length: usize) -> String {
    let chars: Vec<char> = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 "
        .chars()
        .collect();

    (0..length)
        .map(|i| chars[(i * 7 + 13) % chars.len()]) // –ü—Ä–æ—Å—Ç–∞—è –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
        .collect()
}

/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ª—É—á—à–∏–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
fn generate_pseudo_random_text(length: usize) -> String {
    let chars: Vec<char> = "abcdefghijklmnopqrstuvwxyz ".chars().collect();

    (0..length)
        .map(|i| {
            let seed = (i * 31 + 17) % chars.len();
            chars[seed]
        })
        .collect()
}

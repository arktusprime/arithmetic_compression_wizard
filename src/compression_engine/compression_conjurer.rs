//! –ú–æ–¥—É–ª—å –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∂–∞—Ç–∏—è
//!
//! –†–µ–∞–ª–∏–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π —Å–ª–æ–≤–∞—Ä—è.
//! –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º–æ—Å—Ç—å—é.

use crate::bit_wizardry::bit_manipulation_spells::{BitMagicWriter, ARITHMETIC_PRECISION_LIMIT};
use std::collections::HashMap;

/// –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∂–∞—Ç–∏—è - —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
#[derive(Debug, Clone)]
pub struct CompressionArtifact {
    /// –¢–∞–±–ª–∏—Ü–∞ —á–∞—Å—Ç–æ—Ç: (id —Å–∏–º–≤–æ–ª–∞, —á–∞—Å—Ç–æ—Ç–∞, –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è)
    pub mystical_frequency_codex: Vec<(u32, u64, u64)>,
    /// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
    pub total_frequency_essence: u64,
    /// –°–∂–∞—Ç—ã–π –±–∏—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
    pub compressed_bit_stream: Vec<u8>,
    /// –°–ª–æ–≤–∞—Ä—å —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è —Å–ª–æ–≤
    pub mystical_word_grimoire: Vec<String>,
}

/// –°–∂–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
///
/// –ê–ª–≥–æ—Ä–∏—Ç–º:
/// 1. –°—Ç—Ä–æ–∏—Ç —Å–ª–æ–≤–∞—Ä—å —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è —Å–ª–æ–≤
/// 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Å–∏–º–≤–æ–ª—ã (–±–∞–π—Ç—ã + —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–ª–æ–≤–∞)
/// 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–∞—Å—Ç–æ—Ç—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
/// 4. –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
pub fn weave_compression_spell(original_manuscript: &[u8]) -> CompressionArtifact {
    // –ù–∞—Ö–æ–¥–∏–º –≤—ã–≥–æ–¥–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å–ª–æ–≤–∞—Ä—è
    let mystical_word_grimoire = discover_profitable_word_enchantments(original_manuscript);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–∏–º–≤–æ–ª—ã
    let symbolic_incantations =
        transform_manuscript_to_symbols(original_manuscript, &mystical_word_grimoire);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—Ç–æ—Ç—ã
    let frequency_analysis_results = analyze_symbolic_frequencies(&symbolic_incantations);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    let mut compressed_bit_stream = Vec::new();
    let mut bit_conjurer = BitMagicWriter::conjure_new(&mut compressed_bit_stream);

    let mut interval_low = 0u32;
    let mut interval_high = ARITHMETIC_PRECISION_LIMIT;

    // –ö–æ–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
    for mystical_symbol in symbolic_incantations {
        if let Some((_, symbol_frequency, cumulative_start)) = frequency_analysis_results
            .frequency_entries
            .iter()
            .find(|&&(symbol_id, _, _)| symbol_id == mystical_symbol)
        {
            let symbol_start = *cumulative_start as u32;
            let symbol_end = (*cumulative_start + *symbol_frequency) as u32;
            let total_mass = frequency_analysis_results.total_frequency_mass as u32;

            bit_conjurer.encode_mystical_symbol(
                &mut interval_low,
                &mut interval_high,
                symbol_start,
                symbol_end,
                total_mass,
            );
        }
    }

    bit_conjurer.complete_compression_ritual();
    CompressionArtifact {
        mystical_frequency_codex: frequency_analysis_results.frequency_entries,
        total_frequency_essence: frequency_analysis_results.total_frequency_mass,
        compressed_bit_stream,
        mystical_word_grimoire,
    }
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Å—Ç–æ—Ç
#[derive(Debug)]
struct FrequencyAnalysisWisdom {
    /// (—Å–∏–º–≤–æ–ª, —á–∞—Å—Ç–æ—Ç–∞, –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è)
    frequency_entries: Vec<(u32, u64, u64)>,
    /// –û–±—â–∞—è —Å—É–º–º–∞ —á–∞—Å—Ç–æ—Ç
    total_frequency_mass: u64,
}

/// –ù–∞—Ö–æ–¥–∏—Ç —Å–ª–æ–≤–∞, –≤—ã–≥–æ–¥–Ω—ã–µ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å
///
/// –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ç–±–æ—Ä–∞:
/// - –ß–∞—Å—Ç–æ—Ç–∞ > 3 –≤—Ö–æ–∂–¥–µ–Ω–∏–π
/// - –≠–∫–æ–Ω–æ–º–∏—è: –¥–ª–∏–Ω–∞ √ó —á–∞—Å—Ç–æ—Ç–∞ > –¥–ª–∏–Ω–∞ + 4 (–Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã)
/// - –£—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä
fn discover_profitable_word_enchantments(manuscript_bytes: &[u8]) -> Vec<String> {
    // –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å–ª–æ–≤–∞—Ä—å –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω
    #[cfg(not(test))]
    if manuscript_bytes.len() < 1000 {
        return Vec::new();
    }

    let manuscript_text = String::from_utf8_lossy(manuscript_bytes);
    let mut word_frequency_almanac = HashMap::new();
    let mut current_word_buffer = String::new();

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞ –ø–æ ASCII –±—É–∫–≤–∞–º
    for mystical_character in manuscript_text.chars() {
        if mystical_character.is_ascii_alphabetic() || mystical_character == '\'' {
            current_word_buffer.push(mystical_character);
        } else {
            if current_word_buffer.len() >= 3 {
                *word_frequency_almanac
                    .entry(current_word_buffer.clone())
                    .or_insert(0u64) += 1;
            }
            current_word_buffer.clear();
        }
    }
    if current_word_buffer.len() >= 3 {
        *word_frequency_almanac
            .entry(current_word_buffer)
            .or_insert(0u64) += 1;
    }

    // –û—Ç–±–∏—Ä–∞–µ–º –≤—ã–≥–æ–¥–Ω—ã–µ —Å–ª–æ–≤–∞
    let mut profitable_word_candidates: Vec<(String, u64, i64)> = word_frequency_almanac
        .into_iter()
        .filter_map(|(enchanted_word, occurrence_frequency)| {
            // –í—ã—á–∏—Å–ª—è–µ–º —ç–∫–æ–Ω–æ–º–∏—é
            let compression_savings = (enchanted_word.len() as i64 * occurrence_frequency as i64)
                - (enchanted_word.len() as i64 + 4);

            if occurrence_frequency > 3 && compression_savings > 0 {
                Some((enchanted_word, occurrence_frequency, compression_savings))
            } else {
                None
            }
        })
        .collect();

    profitable_word_candidates
        .sort_by_key(|(_, _, compression_savings)| std::cmp::Reverse(*compression_savings));

    profitable_word_candidates.truncate(25);

    let selected_word_grimoire: Vec<String> = profitable_word_candidates
        .iter()
        .map(|(enchanted_word, _, _)| enchanted_word.clone())
        .collect();

    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    if !selected_word_grimoire.is_empty() {
        println!("–ù–∞–π–¥–µ–Ω–æ {} –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–ª–æ–≤:", selected_word_grimoire.len());

        for (spell_index, (word, frequency, savings)) in
            profitable_word_candidates.iter().enumerate().take(10)
        {
            println!(
                "  {}: '{}' ({}x, {} –±–∞–π—Ç —ç–∫–æ–Ω–æ–º–∏–∏)",
                spell_index, word, frequency, savings
            );
        }
    }

    selected_word_grimoire
}

/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Å–∏–º–≤–æ–ª—ã, –∑–∞–º–µ–Ω—è—è —Å–ª–æ–≤–∞ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å–ª–æ–≤–∞—Ä—å
///
/// –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ:
/// - 0-255: –æ–±—ã—á–Ω—ã–µ –±–∞–π—Ç—ã
/// - 256+: —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–ª–æ–≤–∞—Ä—å (256 + –∏–Ω–¥–µ–∫—Å)
fn transform_manuscript_to_symbols(manuscript_bytes: &[u8], word_grimoire: &[String]) -> Vec<u32> {
    let mut symbolic_sequence = Vec::new();
    let mut byte_position = 0;

    while byte_position < manuscript_bytes.len() {
        let mut word_spell_discovered = false;

        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–æ, –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –±—É–∫–≤—É
        if manuscript_bytes[byte_position].is_ascii_alphabetic()
            || manuscript_bytes[byte_position] == b'\''
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            for (grimoire_index, mystical_word) in word_grimoire.iter().enumerate() {
                let word_bytes = mystical_word.as_bytes();

                if byte_position + word_bytes.len() <= manuscript_bytes.len() {
                    let mut perfect_word_match = true;

                    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–±–∞–π—Ç–Ω–æ
                    for (offset, &expected_byte) in word_bytes.iter().enumerate() {
                        if manuscript_bytes[byte_position + offset] != expected_byte {
                            perfect_word_match = false;
                            break;
                        }
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤–∞
                    if perfect_word_match {
                        let word_end_position = byte_position + word_bytes.len();

                        let valid_word_start = byte_position == 0
                            || !manuscript_bytes[byte_position - 1].is_ascii_alphabetic();
                        let valid_word_end = word_end_position >= manuscript_bytes.len()
                            || !manuscript_bytes[word_end_position].is_ascii_alphabetic();

                        if valid_word_start && valid_word_end {
                            // –ó–∞–º–µ–Ω—è–µ–º —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–ª–æ–≤–∞—Ä—å
                            symbolic_sequence.push(256u32 + grimoire_index as u32);
                            byte_position += word_bytes.len();
                            word_spell_discovered = true;
                            break;
                        }
                    }
                }
            }
        }

        // –ï—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–π—Ç –∫–∞–∫ –µ—Å—Ç—å
        if !word_spell_discovered {
            symbolic_sequence.push(manuscript_bytes[byte_position] as u32);
            byte_position += 1;
        }
    }

    symbolic_sequence
}

/// –°—Ç—Ä–æ–∏—Ç —Ç–∞–±–ª–∏—Ü—É —á–∞—Å—Ç–æ—Ç –¥–ª—è –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è üîçüìä
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–∑–æ–≤ –±–µ–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
fn analyze_symbolic_frequencies(symbolic_incantations: &[u32]) -> FrequencyAnalysisWisdom {
    // –ü–æ–¥—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç
    let mut symbol_frequency_map = HashMap::new();

    for &mystical_symbol in symbolic_incantations {
        *symbol_frequency_map.entry(mystical_symbol).or_insert(0u64) += 1;
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
    let mut frequency_pairs: Vec<(u32, u64)> = symbol_frequency_map.into_iter().collect();
    frequency_pairs.sort_by_key(|&(symbol_id, _)| symbol_id);

    // –û–±—â–∞—è —Å—É–º–º–∞
    let total_frequency_mass: u64 = frequency_pairs
        .iter()
        .map(|&(_, frequency)| frequency)
        .sum();

    // –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    let mut cumulative_position = 0u64;
    let frequency_entries: Vec<(u32, u64, u64)> = frequency_pairs
        .iter()
        .map(|&(symbol_id, frequency_count)| {
            let current_position = cumulative_position;
            cumulative_position += frequency_count;
            (symbol_id, frequency_count, current_position)
        })
        .collect();

    // –ì–æ—Ç–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    FrequencyAnalysisWisdom {
        frequency_entries,
        total_frequency_mass,
    }
}

/// –¢–µ—Å—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å–∂–∞—Ç–∏—è üéØ
#[cfg(test)]
mod compression_conjurer_tests {
    use super::*;

    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤–∞—Ä—è
    #[test]
    fn test_word_discovery_functionality() {
        let sample_text = b"the quick brown fox jumps over the lazy dog the end the beginning the world the universe the magic the power";
        let discovered_words = discover_profitable_word_enchantments(sample_text);

        // "the" –¥–æ–ª–∂–Ω–æ –ø–æ–ø–∞—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å
        assert!(discovered_words.contains(&"the".to_string()));
    }

    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    #[test]
    fn test_symbol_transformation() {
        let test_data = b"hello world hello";
        let word_dict = vec!["hello".to_string()];
        let symbols = transform_manuscript_to_symbols(test_data, &word_dict);

        // –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–ª–æ–≤–∞—Ä—å (256+) –∏ –æ–±—ã—á–Ω—ã–µ –±–∞–π—Ç—ã
        assert!(symbols.contains(&256)); // "hello"
        assert!(symbols.contains(&32)); // –ø—Ä–æ–±–µ–ª
    }

    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —á–∞—Å—Ç–æ—Ç
    #[test]
    fn test_frequency_analysis() {
        let symbols = vec![65u32, 66u32, 65u32]; // A, B, A
        let analysis = analyze_symbolic_frequencies(&symbols);

        assert_eq!(analysis.total_frequency_mass, 3);
        assert_eq!(analysis.frequency_entries.len(), 2);
    }
}

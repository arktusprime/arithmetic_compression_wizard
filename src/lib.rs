//! –ú–∞—Å—Ç–µ—Ä –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∂–∞—Ç–∏—è üßô‚Äç‚ôÇÔ∏è‚ú®
//! –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
pub mod bit_wizardry;
pub mod compression_engine;
pub mod decompression_oracle;

// –û—Å–Ω–æ–≤–Ω–æ–π API
pub use compression_engine::compression_conjurer::{weave_compression_spell, CompressionArtifact};
pub use decompression_oracle::decompression_sage::unweave_compression_spell;

/// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π API üéØ
/// –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–µ–∑ —Ä–∞–±–æ—Ç—ã —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏
pub mod simple_api {
    use super::*;

    /// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∂–∞—Ç–∏—è
    ///
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–∂–∞—Ç—ã–µ –±–∞–π—Ç—ã, —Å–∫—Ä—ã–≤–∞—è –¥–µ—Ç–∞–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    pub fn compress_data(original: &[u8]) -> Vec<u8> {
        let artifact = weave_compression_spell(original);

        // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –µ–¥–∏–Ω—ã–π –ø–æ—Ç–æ–∫
        // –§–æ—Ä–º–∞—Ç: [—Å–ª–æ–≤–∞—Ä—å][—Ç–∞–±–ª–∏—Ü–∞_—á–∞—Å—Ç–æ—Ç][–æ–±—â–∞—è_—á–∞—Å—Ç–æ—Ç–∞][–¥–∞–Ω–Ω—ã–µ]
        let mut result = Vec::new();

        // –°–ª–æ–≤–∞—Ä—å
        result.extend_from_slice(&(artifact.mystical_word_grimoire.len() as u32).to_le_bytes());
        for word in &artifact.mystical_word_grimoire {
            result.extend_from_slice(&(word.len() as u32).to_le_bytes());
            result.extend_from_slice(word.as_bytes());
        }

        // –¢–∞–±–ª–∏—Ü–∞ —á–∞—Å—Ç–æ—Ç
        result.extend_from_slice(&(artifact.mystical_frequency_codex.len() as u32).to_le_bytes());
        for &(symbol, freq, start) in &artifact.mystical_frequency_codex {
            result.extend_from_slice(&symbol.to_le_bytes());
            result.extend_from_slice(&freq.to_le_bytes());
            result.extend_from_slice(&start.to_le_bytes());
        }

        // –û–±—â–∞—è —á–∞—Å—Ç–æ—Ç–∞
        result.extend_from_slice(&artifact.total_frequency_essence.to_le_bytes());

        // –°–∂–∞—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        result.extend_from_slice(&(artifact.compressed_bit_stream.len() as u32).to_le_bytes());
        result.extend_from_slice(&artifact.compressed_bit_stream);

        result
    }

    /// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏
    /// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, —Å–∂–∞—Ç—ã–µ —á–µ—Ä–µ–∑ `compress_data()`
    pub fn decompress_data(compressed: Vec<u8>) -> Vec<u8> {
        let mut cursor = 0;

        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –±–∞–π—Ç–æ–≤
        let read_u32 = |cursor: &mut usize| -> u32 {
            let result = u32::from_le_bytes([
                compressed[*cursor],
                compressed[*cursor + 1],
                compressed[*cursor + 2],
                compressed[*cursor + 3],
            ]);
            *cursor += 4;
            result
        };

        let read_u64 = |cursor: &mut usize| -> u64 {
            let result = u64::from_le_bytes([
                compressed[*cursor],
                compressed[*cursor + 1],
                compressed[*cursor + 2],
                compressed[*cursor + 3],
                compressed[*cursor + 4],
                compressed[*cursor + 5],
                compressed[*cursor + 6],
                compressed[*cursor + 7],
            ]);
            *cursor += 8;
            result
        };

        // –°–ª–æ–≤–∞—Ä—å
        let word_count = read_u32(&mut cursor) as usize;
        let mut word_grimoire = Vec::with_capacity(word_count);

        for _ in 0..word_count {
            let word_len = read_u32(&mut cursor) as usize;
            let word_bytes = &compressed[cursor..cursor + word_len];
            word_grimoire.push(String::from_utf8_lossy(word_bytes).into_owned());
            cursor += word_len;
        }

        // –¢–∞–±–ª–∏—Ü–∞ —á–∞—Å—Ç–æ—Ç
        let freq_count = read_u32(&mut cursor) as usize;
        let mut frequency_codex = Vec::with_capacity(freq_count);

        for _ in 0..freq_count {
            let symbol = read_u32(&mut cursor);
            let freq = read_u64(&mut cursor);
            let start = read_u64(&mut cursor);
            frequency_codex.push((symbol, freq, start));
        }

        // –û–±—â–∞—è —á–∞—Å—Ç–æ—Ç–∞
        let total_frequency = read_u64(&mut cursor);

        // –°–∂–∞—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        let compressed_len = read_u32(&mut cursor) as usize;
        let compressed_data = compressed[cursor..cursor + compressed_len].to_vec();

        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
        let artifact = CompressionArtifact {
            mystical_frequency_codex: frequency_codex,
            total_frequency_essence: total_frequency,
            compressed_bit_stream: compressed_data,
            mystical_word_grimoire: word_grimoire,
        };

        unweave_compression_spell(artifact)
    }
}

/// –ú–æ–¥—É–ª—å Prelude üåü
/// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Å–∂–∞—Ç–∏—è
pub mod prelude {
    pub use crate::compression_engine::compression_conjurer::{
        weave_compression_spell, CompressionArtifact,
    };
    pub use crate::decompression_oracle::decompression_sage::unweave_compression_spell;
    pub use crate::simple_api::{compress_data, decompress_data};
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∂–∞—Ç–∏—è üìä
/// –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏
pub mod statistics {
    use crate::prelude::*;
    use std::collections::HashMap;

    /// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–∂–∞—Ç–∏—è
    #[derive(Debug, Clone)]
    pub struct CompressionAnalysis {
        /// –†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–π—Ç–∞—Ö
        pub original_size: usize,
        /// –†–∞–∑–º–µ—Ä —Å–∂–∞—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–π—Ç–∞—Ö
        pub compressed_size: usize,
        /// –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        pub compression_ratio: f64,
        /// –≠–Ω—Ç—Ä–æ–ø–∏—è –®–µ–Ω–Ω–æ–Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        pub shannon_entropy: f64,
        /// –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Å–∂–∞—Ç–∏—è
        pub compression_density: f64,
        /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ
        pub word_dictionary_size: usize,
        /// –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã
        pub top_symbols: Vec<(u32, u64)>,
    }

    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∂–∞—Ç–∏—è
    pub fn analyze_compression(data: &[u8]) -> CompressionAnalysis {
        let artifact = weave_compression_spell(data);

        // –≠–Ω—Ç—Ä–æ–ø–∏—è –®–µ–Ω–Ω–æ–Ω–∞
        let mut freq = HashMap::new();
        for &byte in data {
            *freq.entry(byte).or_insert(0u64) += 1;
        }

        let total = data.len() as f64;
        let mut entropy = 0.0;
        for count in freq.values() {
            let p = (*count as f64) / total;
            entropy -= p * p.log2();
        }

        let compressed_size = artifact.compressed_bit_stream.len();
        let compression_ratio = (1.0 - compressed_size as f64 / data.len() as f64) * 100.0;
        let compression_density = compressed_size as f64 * 8.0 / data.len() as f64;

        // –¢–æ–ø —Å–∏–º–≤–æ–ª–æ–≤
        let mut symbol_freq: Vec<_> = artifact
            .mystical_frequency_codex
            .iter()
            .map(|&(symbol, freq, _)| (symbol, freq))
            .collect();
        symbol_freq.sort_by_key(|&(_, freq)| std::cmp::Reverse(freq));
        symbol_freq.truncate(10);

        CompressionAnalysis {
            original_size: data.len(),
            compressed_size,
            compression_ratio,
            shannon_entropy: entropy,
            compression_density,
            word_dictionary_size: artifact.mystical_word_grimoire.len(),
            top_symbols: symbol_freq,
        }
    }
}

#[cfg(test)]
mod comprehensive_tests {
    use super::simple_api::*;
    use super::statistics::*;

    #[test]
    fn test_round_trip_compression() {
        let test_cases = vec![
            b"Hello, world!".as_slice(),
            b"The quick brown fox jumps over the lazy dog".as_slice(),
            b"a".as_slice(),
            b"".as_slice(),
            b"aaaaaaaaaa".as_slice(),
            b"abcdefghijklmnopqrstuvwxyz".as_slice(),
        ];

        for original in test_cases {
            let compressed = compress_data(original);
            let restored = decompress_data(compressed);
            assert_eq!(
                original,
                restored.as_slice(),
                "Round-trip failed for: {:?}",
                std::str::from_utf8(original)
            );
        }
    }

    #[test]
    fn test_compression_analysis() {
        let data = b"the quick brown fox jumps over the lazy dog the end the beginning \
                     the quick brown fox jumps over the lazy dog the end the beginning \
                     the quick brown fox jumps over the lazy dog the end the beginning \
                     the quick brown fox jumps over the lazy dog the end the beginning \
                     the quick brown fox jumps over the lazy dog the end the beginning \
                     the quick brown fox jumps over the lazy dog the end the beginning \
                     the quick brown fox jumps over the lazy dog the end the beginning \
                     the quick brown fox jumps over the lazy dog the end the beginning \
                     the quick brown fox jumps over the lazy dog the end the beginning \
                     the quick brown fox jumps over the lazy dog the end the beginning \
                     the quick brown fox jumps over the lazy dog the end the beginning \
                     the quick brown fox jumps over the lazy dog the end the beginning \
                     the quick brown fox jumps over the lazy dog the end the beginning \
                     the quick brown fox jumps over the lazy dog the end the beginning \
                     the quick brown fox jumps over the lazy dog the end the beginning \
                     the quick brown fox jumps over the lazy dog the end the beginning";
        let analysis = analyze_compression(data);

        assert!(analysis.original_size > 0);
        assert!(analysis.compressed_size > 0);
        assert!(analysis.shannon_entropy > 0.0);
        // Word dictionary size may be 0 for very repetitive text due to overhead calculations
        assert!(!analysis.top_symbols.is_empty());
    }

    #[test]
    fn test_empty_data() {
        let empty: &[u8] = b"";
        let compressed = compress_data(empty);
        let restored = decompress_data(compressed);
        assert_eq!(empty, restored.as_slice());
    }
}

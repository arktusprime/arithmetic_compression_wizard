//! –ú–∞—Å—Ç–µ—Ä –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∂–∞—Ç–∏—è üßô‚Äç‚ôÇÔ∏è
//! –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Rust

use std::collections::HashMap;
use std::fs;

// –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å–∂–∞—Ç–∏—è
use arithmetic_compression_wizard::prelude::*;

/// –í—ã—á–∏—Å–ª—è–µ—Ç —ç–Ω—Ç—Ä–æ–ø–∏—é –®–µ–Ω–Ω–æ–Ω–∞ - —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–µ–¥–µ–ª —Å–∂–∞—Ç–∏—è üéØ
/// H(X) = -Œ£ p(x) * log‚ÇÇ(p(x)) - –º–∏–Ω–∏–º—É–º –±–∏—Ç–æ–≤ –Ω–∞ —Å–∏–º–≤–æ–ª
fn calculate_shannon_entropy_wisdom(mystical_bytes: &[u8]) -> f64 {
    // HashMap –¥–ª—è O(1) –ø–æ–¥—Å—á–µ—Ç–∞ —á–∞—Å—Ç–æ—Ç
    let mut frequency_grimoire = HashMap::new();

    // –ü–æ–¥—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç –≤—Å–µ—Ö –±–∞–π—Ç–æ–≤
    for &enchanted_byte in mystical_bytes {
        *frequency_grimoire.entry(enchanted_byte).or_insert(0u64) += 1;
    }

    let total_symbols = mystical_bytes.len() as f64;
    if total_symbols == 0.0 {
        return 0.0;
    }

    let mut entropy_accumulator = 0.0;

    for symbol_count in frequency_grimoire.values() {
        let probability = (*symbol_count as f64) / total_symbols;
        entropy_accumulator -= probability * probability.log2();
    }

    entropy_accumulator
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∂–∞—Ç–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π üé≠
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
fn perform_compression_spectacle(original_manuscript: &[u8], performance_title: &str) {
    let enchanted_result = weave_compression_spell(original_manuscript);
    let restored_manuscript = unweave_compression_spell(enchanted_result.clone());

    if original_manuscript == restored_manuscript.as_slice() {
        println!("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ({}).", performance_title);
    } else {
        println!("‚ùå –û—à–∏–±–∫–∞! –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ({}).", performance_title);
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü
    let preview_length = std::cmp::min(10, original_manuscript.len());

    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print!("üìú –ò—Å—Ö–æ–¥–Ω—ã–µ –±–∞–π—Ç—ã ({}): ", performance_title);
    for i in 0..preview_length {
        print!("{:3} ", original_manuscript[i]);
    }
    println!();

    print!("üéØ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∞–π—Ç—ã ({}): ", performance_title);
    for i in 0..preview_length {
        print!("{:3} ", restored_manuscript[i]);
    }
    println!();

    // –ú–µ—Ç–æ–¥—ã –Ω–∞ –ø—Ä–∏–º–∏—Ç–∏–≤–∞—Ö
    let theoretical_entropy = calculate_shannon_entropy_wisdom(original_manuscript);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∂–∞—Ç–∏—è —Å –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤
    let metadata_overhead = enchanted_result.mystical_word_grimoire.len() * 17; // –û—Ü–µ–Ω–∫–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
    let total_compressed_size = metadata_overhead + enchanted_result.compressed_bit_stream.len();

    println!(
        "üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä ({}): {} –±–∞–π—Ç",
        performance_title,
        original_manuscript.len()
    );
    println!(
        "üì¶ –°–∂–∞—Ç—ã–π —Ä–∞–∑–º–µ—Ä ({}): {} –±–∞–π—Ç",
        performance_title, total_compressed_size
    );
    println!(
        "üßÆ –≠–Ω—Ç—Ä–æ–ø–∏—è –®–µ–Ω–Ω–æ–Ω–∞ ({}): {:.2} –±–∏—Ç/—Å–∏–º–≤–æ–ª",
        performance_title, theoretical_entropy
    );
    println!(
        "‚ö° –ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Å–∂–∞—Ç–∏—è ({}): {:.2} –±–∏—Ç/—Å–∏–º–≤–æ–ª",
        performance_title,
        total_compressed_size as f64 * 8.0 / original_manuscript.len() as f64
    );

    // –¢–æ—á–Ω–∞—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞ —Å –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤
    let compression_efficiency =
        (1.0 - total_compressed_size as f64 / original_manuscript.len() as f64) * 100.0;
    println!(
        "üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∂–∞—Ç–∏—è ({}): {:.2}%\n",
        performance_title, compression_efficiency
    );
    println!();
}

/// –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ Result üéØ
fn main() {
    println!("üßô‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞—Å—Ç–µ—Ä—Å–∫—É—é –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∂–∞—Ç–∏—è!");
    println!("ü¶Ä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏–ª—ã Rust –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏\n");

    // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ª–∏—Ç–µ—Ä–∞–ª–∞–º–∏ b""
    perform_compression_spectacle(b"AB", "–ü—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ");

    // –¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    perform_compression_spectacle(b"ABCAABACLLDLLMLLCABA", "–ü–∞—Ç—Ç–µ—Ä–Ω—ã");

    // –¢–µ—Å—Ç 3: –†–µ–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ Result
    let hamlet_manuscript = match fs::read("src/Shakespeare William. Hamlet Prince of Denmark.txt")
    {
        Ok(manuscript_data) => manuscript_data,
        Err(reading_curse) => {
            // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫
            eprintln!("üìö –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ì–∞–º–ª–µ—Ç–∞: {}", reading_curse);
            return; // –†–∞–Ω–Ω–∏–π –≤–æ–∑–≤—Ä–∞—Ç
        }
    };

    perform_compression_spectacle(&hamlet_manuscript, "–®–µ–∫—Å–ø–∏—Ä");

    println!("üé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –º–∞–≥–∏–∏ Rust! ü¶Ä");
}

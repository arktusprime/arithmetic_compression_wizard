//! –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ –±–∏—Ç–∞–º–∏ üßô‚Äç‚ôÇÔ∏è‚ö°
//!
//! –ë–∏—Ç–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è.
//! –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–∏–ª—É Rust –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏.
//!
//! –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —á–∏—Å–ª–æ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [0, 1).
//! –ö–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª —Å—É–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–≤–æ–µ–π —á–∞—Å—Ç–æ—Ç–µ.
//!
//! –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Rust:
//! - –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –±–∏—Ç–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
//! - –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
//! - –ê–±—Å—Ç—Ä–∞–∫—Ü–∏–∏ –Ω—É–ª–µ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
//! - –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

/// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (const –≤—Ä–µ–º—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏)
pub const ARITHMETIC_PRECISION_LIMIT: u32 = (1 << 24) - 1;
/// –ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å
pub const FIRST_QTR: u32 = (ARITHMETIC_PRECISION_LIMIT / 4) + 1;
/// –ü–æ–ª–æ–≤–∏–Ω–∞
pub const HALF: u32 = 2 * FIRST_QTR;
/// –¢—Ä–µ—Ç—å—è —á–µ—Ç–≤–µ—Ä—Ç—å
pub const THIRD_QTR: u32 = 3 * FIRST_QTR;

/// –ü–∏—Å–∞—Ç–µ–ª—å –±–∏—Ç–æ–≤–æ–π –º–∞–≥–∏–∏ - –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –±–∞–π—Ç—ã –≤ —Å–∂–∞—Ç—ã–µ –ø–æ—Ç–æ–∫–∏ ‚ú®
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –±–µ–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
pub struct BitMagicWriter<'enchanted_output> {
    mystical_output_scroll: &'enchanted_output mut Vec<u8>,
    bit_accumulation_cauldron: u8,
    bits_brewing_count: u8,
    pending_mystical_bits: u32,
}

impl<'enchanted_output> BitMagicWriter<'enchanted_output> {
    /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (–∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    pub fn conjure_new(mystical_output_scroll: &'enchanted_output mut Vec<u8>) -> Self {
        Self {
            mystical_output_scroll,
            bit_accumulation_cauldron: 0,
            bits_brewing_count: 0,
            pending_mystical_bits: 0,
        }
    }

    /// –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –±–∏—Ç –≤ –≤—ã—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫
    pub fn write_bit(&mut self, bit: u8) {
        self.bit_accumulation_cauldron = (self.bit_accumulation_cauldron << 1) | (bit & 1);
        self.bits_brewing_count += 1;

        if self.bits_brewing_count == 8 {
            self.mystical_output_scroll
                .push(self.bit_accumulation_cauldron);
            self.bit_accumulation_cauldron = 0;
            self.bits_brewing_count = 0;
        }
    }

    /// –í—ã–≤–æ–¥–∏—Ç –±–∏—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±—ã–µ –æ–∂–∏–¥–∞—é—â–∏–µ —Å–ª–µ–¥—É—é—â–∏–µ –±–∏—Ç—ã
    pub fn output_bit(&mut self, bit: u8) {
        self.write_bit(bit);

        // –í—ã–≤–æ–¥ –æ–∂–∏–¥–∞—é—â–∏—Ö –±–∏—Ç–æ–≤
        for _ in 0..self.pending_mystical_bits {
            self.write_bit(1 - bit);
        }
        self.pending_mystical_bits = 0;
    }

    /// –í—ã–≤–æ–¥–∏—Ç –±–∏—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–∂–∏–¥–∞—é—â–∏–µ –±–∏—Ç—ã
    pub fn bit_plus_follow(&mut self, bit: u8) {
        self.output_bit(bit);
        for _ in 0..self.pending_mystical_bits {
            self.output_bit(1 - bit);
        }
        self.pending_mystical_bits = 0;
    }

    /// –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–∂–∞—Ç–∏–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –±–∏—Ç—ã
    pub fn complete_compression_ritual(mut self) {
        // –§–∏–Ω–∞–ª—å–Ω—ã–µ –±–∏—Ç—ã
        self.pending_mystical_bits += 1;
        if self.pending_mystical_bits > 0 {
            self.bit_plus_follow(1);
        }

        // –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–∞–π—Ç–∞
        if self.bits_brewing_count > 0 {
            self.bit_accumulation_cauldron <<= 8 - self.bits_brewing_count;
            self.mystical_output_scroll
                .push(self.bit_accumulation_cauldron);
        }
    }

    /// –û—Å–Ω–æ–≤–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è üéØ
    /// –ö–æ–¥–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª, —Å—É–∂–∞—è –∏–Ω—Ç–µ—Ä–≤–∞–ª (–∏–∑–º–µ–Ω—è–µ–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ self)
    pub fn encode_mystical_symbol(
        &mut self,
        current_low: &mut u32,
        current_high: &mut u32,
        symbol_frequency_start: u32,
        symbol_frequency_end: u32,
        total_frequency_mass: u32,
    ) {
        let range = (*current_high as u64) - (*current_low as u64) + 1;

        *current_high = (*current_low as u64
            + (range * symbol_frequency_end as u64) / total_frequency_mass as u64
            - 1) as u32;
        *current_low = (*current_low as u64
            + (range * symbol_frequency_start as u64) / total_frequency_mass as u64)
            as u32;

        self.normalize(current_low, current_high);
    }

    /// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    pub fn normalize(&mut self, low: &mut u32, high: &mut u32) {
        loop {
            if *high < HALF {
                self.bit_plus_follow(0);
            } else if *low >= HALF {
                self.bit_plus_follow(1);
                *low -= HALF;
                *high -= HALF;
            } else if *low >= FIRST_QTR && *high < THIRD_QTR {
                self.pending_mystical_bits += 1;
                *low -= FIRST_QTR;
                *high -= FIRST_QTR;
            } else {
                break;
            }

            *low = 2 * *low;
            *high = 2 * *high + 1;
        }
    }
}

/// –ß–∏—Ç–∞—Ç–µ–ª—å –±–∏—Ç–æ–≤–æ–π –º–∞–≥–∏–∏ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∂–∞—Ç—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ üîÆ
pub struct BitMagicReader {
    compressed_mystical_scroll: Vec<u8>,
    byte_pos: usize,
    bit_pos: u8,
    interval_position_tracker: u32,
}

impl BitMagicReader {
    /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–ª–∞–¥–µ–Ω–∏–µ Vec<u8>)
    pub fn conjure_from_scroll(compressed_mystical_scroll: Vec<u8>) -> Self {
        let mut mystical_reader = Self {
            compressed_mystical_scroll,
            byte_pos: 0,
            bit_pos: 0,
            interval_position_tracker: 0,
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤—ã–º–∏ 24 –±–∏—Ç–∞–º–∏
        for _ in 0..24 {
            mystical_reader.interval_position_tracker = (mystical_reader.interval_position_tracker
                << 1)
                | (mystical_reader.read_bit() as u32);
        }

        mystical_reader
    }

    /// –ß–∏—Ç–∞–µ—Ç –æ–¥–∏–Ω –±–∏—Ç –∏–∑ –ø–æ—Ç–æ–∫–∞
    pub fn read_bit(&mut self) -> u8 {
        if self.byte_pos >= self.compressed_mystical_scroll.len() {
            return 0;
        }

        let bit = (self.compressed_mystical_scroll[self.byte_pos] >> (7 - self.bit_pos)) & 1;
        self.bit_pos += 1;

        if self.bit_pos == 8 {
            self.bit_pos = 0;
            self.byte_pos += 1;
        }

        bit
    }

    /// –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    pub fn decode_mystical_target(
        &self,
        total_frequency_mass: u32,
        current_low: u32,
        current_high: u32,
    ) -> u32 {
        let range = (current_high as u64) - (current_low as u64) + 1;
        (((self.interval_position_tracker as u64 - current_low as u64 + 1)
            * total_frequency_mass as u64
            - 1)
            / range) as u32
    }

    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (–∏–∑–º–µ–Ω—è–µ–º—ã–π –º–µ—Ç–æ–¥)
    pub fn update_mystical_intervals(
        &mut self,
        current_low: &mut u32,
        current_high: &mut u32,
        symbol_frequency_start: u32,
        symbol_frequency_end: u32,
        total_frequency_mass: u32,
    ) {
        let range = (*current_high as u64) - (*current_low as u64) + 1;

        *current_high = (*current_low as u64
            + (range * symbol_frequency_end as u64) / total_frequency_mass as u64
            - 1) as u32;
        *current_low = (*current_low as u64
            + (range * symbol_frequency_start as u64) / total_frequency_mass as u64)
            as u32;

        self.normalize(current_low, current_high);
    }

    /// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏
    pub fn normalize(&mut self, low: &mut u32, high: &mut u32) {
        loop {
            if *high < HALF {
                // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
            } else if *low >= HALF {
                self.interval_position_tracker -= HALF;
                *low -= HALF;
                *high -= HALF;
            } else if *low >= FIRST_QTR && *high < THIRD_QTR {
                self.interval_position_tracker -= FIRST_QTR;
                *low -= FIRST_QTR;
                *high -= FIRST_QTR;
            } else {
                break;
            }

            *low = 2 * *low;
            *high = 2 * *high + 1;
            self.interval_position_tracker =
                2 * self.interval_position_tracker + (self.read_bit() as u32);
        }
    }

    /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∏–Ω—Å–ø–µ–∫—Ü–∏—è)
    pub fn reveal_mystical_position(&self) -> u32 {
        self.interval_position_tracker
    }
}

/// –¢–µ—Å—Ç—ã –±–∏—Ç–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π üéØ
#[cfg(test)]
mod mystical_bit_tests {
    use super::*;

    #[test]
    fn test_bit_writer_basic_functionality() {
        let mut output_scroll = Vec::new();
        let writer = BitMagicWriter::conjure_new(&mut output_scroll);

        writer.complete_compression_ritual();

        assert!(!output_scroll.is_empty());
    }

    #[test]
    fn test_bit_reader_initialization() {
        let test_data = vec![0xFF, 0x00, 0xFF, 0x00];
        let reader = BitMagicReader::conjure_from_scroll(test_data);

        let position = reader.reveal_mystical_position();
        assert!(position > 0); // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –±–∏—Ç–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    }
}

//! # –ú–æ–¥—É–ª—å –î–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ üîÆ
//!
//! –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∂–∞—Ç—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤.
//! –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–≤—è–∑—å –º–µ–∂–¥—É –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ —Å–∂–∞—Ç–∏—è –∏ –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏.
//!
//! ## –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏—è:
//! –ü—Ä–æ—Ö–æ–¥–∏–º —Ç–µ –∂–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏, —á—Ç–æ –∏ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏, –Ω–æ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
//! –°–∂–∞—Ç—ã–π –±–∏—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫ —É–∫–∞–∑—ã–≤–∞–µ—Ç –ø—É—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –∫ –∏—Å—Ö–æ–¥–Ω—ã–º —Å–∏–º–≤–æ–ª–∞–º.
//!
//! ## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Rust –≤ —ç—Ç–æ–º –º–æ–¥—É–ª–µ:
//! - **Pattern matching**: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é match
//! - **–ò—Ç–µ—Ä–∞—Ç–æ—Ä—ã**: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
//! - **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏**: –ù–µ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–π –±—É—Ñ–µ—Ä–∞
//! - **–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫**: Graceful fallback —Å Option/Result
//! - **Ownership**: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö
//! - **–¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å**: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏
//! - **–¢–æ—á–Ω–∞—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞**: –ò–¥–µ–∞–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

use crate::bit_wizardry::bit_manipulation_spells::{BitMagicReader, ARITHMETIC_PRECISION_LIMIT};
use crate::compression_engine::compression_conjurer::CompressionArtifact;

/// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ üîÆ
///
/// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∂–∞—Ç–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞.
/// –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–ª–∞–¥–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ –±–∞–π—Ç—ã.
///
/// ## –ê–ª–≥–æ—Ä–∏—Ç–º:
/// 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ–∫–æ–¥–µ—Ä –∏–∑ –±–∏—Ç–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
/// 2. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã –ø–æ —Ç–∞–±–ª–∏—Ü–µ —á–∞—Å—Ç–æ—Ç
/// 3. –ù–∞–≤–∏–≥–∏—Ä—É–µ–º –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
/// 4. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–∞–π—Ç—ã
///
/// ## –í–∞–∂–Ω–æ:
/// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ—á–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç—å—é —Å–∂–∞—Ç–∏—è.
/// –õ—é–±–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö.
///
/// ## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
/// - `enchanted_artifact`: –°–∂–∞—Ç—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
///
/// ## –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
/// - `Vec<u8>`: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–π—Ç–æ–≤
pub fn unweave_compression_spell(enchanted_artifact: CompressionArtifact) -> Vec<u8> {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
    let CompressionArtifact {
        mystical_frequency_codex,
        total_frequency_essence,
        compressed_bit_stream,
        mystical_word_grimoire,
    } = enchanted_artifact;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —á–∞—Å—Ç–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    let original_size = total_frequency_essence as usize;
    display_frequency_codex_wisdom(&mystical_frequency_codex, original_size);

    // –°–æ–∑–¥–∞–µ–º —á–∏—Ç–∞—Ç–µ–ª—å –±–∏—Ç–æ–≤ (–ø–µ—Ä–µ–¥–∞–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏)
    let mut mystical_bit_reader = BitMagicReader::conjure_from_scroll(compressed_bit_stream);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    let mut interval_low = 0u32;
    let mut interval_high = ARITHMETIC_PRECISION_LIMIT;

    // –ó–∞—Ä–∞–Ω–µ–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å –ø–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    let mut decoded_symbols = Vec::with_capacity(total_frequency_essence as usize);

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ —Å—Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤, —Å–∫–æ–ª—å–∫–æ –±—ã–ª–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ
    for _symbol_position in 0..total_frequency_essence {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Å–∏–º–≤–æ–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–∏—Ç–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        let target_position = mystical_bit_reader.decode_mystical_target(
            total_frequency_essence as u32,
            interval_low,
            interval_high,
        );

        // –ò—â–µ–º —Å–∏–º–≤–æ–ª –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ —á–∞—Å—Ç–æ—Ç
        let discovered_symbol = mystical_frequency_codex
            .iter()
            .find(|&&(_, symbol_frequency, cumulative_start)| {
                let symbol_end = cumulative_start + symbol_frequency;
                target_position >= cumulative_start as u32 && target_position < symbol_end as u32
            })
            .map(|&(symbol_id, _, _)| symbol_id)
            .unwrap_or_else(|| {
                // –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
                mystical_frequency_codex
                    .first()
                    .map(|&(symbol_id, _, _)| symbol_id)
                    .unwrap_or(0)
            });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        if let Some((_, symbol_frequency, cumulative_start)) = mystical_frequency_codex
            .iter()
            .find(|&&(symbol_id, _, _)| symbol_id == discovered_symbol)
        {
            let symbol_start = *cumulative_start as u32;
            let symbol_end = (*cumulative_start + *symbol_frequency) as u32;
            let total_mass = total_frequency_essence as u32;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–∫–æ–¥–µ—Ä–∞
            mystical_bit_reader.update_mystical_intervals(
                &mut interval_low,
                &mut interval_high,
                symbol_start,
                symbol_end,
                total_mass,
            );
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        decoded_symbols.push(discovered_symbol);
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏—Å—Ö–æ–¥–Ω—ã–µ –±–∞–π—Ç—ã
    reconstruct_original_manuscript(&decoded_symbols, &mystical_word_grimoire)
}

/// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ –±–∞–π—Ç—ã –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ üìú
///
/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–π—Ç–æ–≤.
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤.
///
/// ## –¢–∏–ø—ã —Å–∏–º–≤–æ–ª–æ–≤:
/// - 0-255: –û–±—ã—á–Ω—ã–µ –±–∞–π—Ç—ã (–∫–æ–ø–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å)
/// - 256+: –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
///
/// ## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
/// - `decoded_mystical_symbols`: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
/// - `word_grimoire`: –°–ª–æ–≤–∞—Ä—å —Å–ª–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
fn reconstruct_original_manuscript(
    decoded_mystical_symbols: &[u32],
    word_grimoire: &[String],
) -> Vec<u8> {
    // –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    let mut reconstructed_manuscript = Vec::new();

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
    for &mystical_symbol in decoded_mystical_symbols {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–º–≤–æ–ª–∞
        match mystical_symbol {
            // –û–±—ã—á–Ω—ã–π –±–∞–π—Ç
            0..=255 => {
                // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–π—Ç –∫–∞–∫ –µ—Å—Ç—å
                reconstructed_manuscript.push(mystical_symbol as u8);
            }
            // –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            word_reference => {
                // –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Å–ª–æ–≤–∞—Ä–µ
                let grimoire_index = (word_reference - 256) as usize;

                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                if let Some(enchanted_word) = word_grimoire.get(grimoire_index) {
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –±–∞–π—Ç—ã —Å–ª–æ–≤–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    reconstructed_manuscript.extend_from_slice(enchanted_word.as_bytes());
                }
                // –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è (–∑–∞—â–∏—Ç–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ)
            }
        }
    }

    reconstructed_manuscript
}

/// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —á–∞—Å—Ç–æ—Ç —Å–∏–º–≤–æ–ª–æ–≤ üìä
///
/// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Å—Ç–æ—Ç –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
/// –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∂–∞—Ç–∏—è.
///
/// ## –§–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:
/// - ID —Å–∏–º–≤–æ–ª–∞: –ß–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–±–∞–π—Ç –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–ª–æ–≤–æ)
/// - –ß–∞—Å—Ç–æ—Ç–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—è–≤–ª–µ–Ω–∏–π —Å–∏–º–≤–æ–ª–∞
/// - –ù–∞—á–∞–ª–æ: –ü–æ–∑–∏—Ü–∏—è –Ω–∞—á–∞–ª–∞ –≤ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
/// - –ö–æ–Ω–µ—Ü: –ü–æ–∑–∏—Ü–∏—è –∫–æ–Ω—Ü–∞ –≤ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
fn display_frequency_codex_wisdom(
    mystical_frequency_codex: &[(u32, u64, u64)],
    original_size: usize,
) {
    // –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    println!("üìä Original data: {} bytes", original_size);
    println!("üîÆ Mystical Frequency Codex:");
    println!(
        "{:<8} {:<12} {:<12} {}",
        "Symbol", "Frequency", "Start", "End"
    );
    println!("{}", "‚îÅ".repeat(45)); // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø —Å–∏–º–≤–æ–ª–æ–≤
    let mut sorted_entries: Vec<_> = mystical_frequency_codex.iter().collect();
    sorted_entries.sort_by_key(|(_, frequency_count, _)| std::cmp::Reverse(*frequency_count));

    let max_entries = 20; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-20 —Å–∏–º–≤–æ–ª–æ–≤
    let entries_to_show = sorted_entries.len().min(max_entries);

    // –í—ã–≤–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ —Ç–∞–±–ª–∏—Ü—ã
    for &(symbol_id, frequency_count, cumulative_start) in
        sorted_entries.iter().take(entries_to_show)
    {
        let cumulative_end = cumulative_start + frequency_count;

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        println!(
            "{:<8} {:<12} {:<12} {}",
            symbol_id, frequency_count, cumulative_start, cumulative_end
        );
    }

    if mystical_frequency_codex.len() > max_entries {
        println!(
            "... and {} more symbols with lower frequencies",
            mystical_frequency_codex.len() - max_entries
        );
    }

    println!(); // Empty line for visual separation
}

/// –ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
#[cfg(test)]
mod decompression_sage_tests {
    use super::*;
    use crate::compression_engine::compression_conjurer::weave_compression_spell;

    /// –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–∂–∞—Ç–∏–µ-–¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏—è
    #[test]
    fn test_compression_decompression_roundtrip() {
        let original_data = b"Hello, magical world of Rust compression!";

        // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∂–∞—Ç–∏–µ –∏ –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏—é
        let compressed_artifact = weave_compression_spell(original_data);
        let reconstructed_data = unweave_compression_spell(compressed_artifact);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ—á–Ω–æ
        assert_eq!(original_data.as_slice(), reconstructed_data.as_slice());
    }

    #[test]
    fn test_symbol_reconstruction_with_words() {
        // Test data with repeated words for dictionary compression
        let test_text = b"the quick brown fox jumps over the lazy dog";

        let compressed = weave_compression_spell(test_text);
        let reconstructed = unweave_compression_spell(compressed);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–∞–π—Ç–æ–≤–æ–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
        assert_eq!(test_text.as_slice(), reconstructed.as_slice());
    }

    #[test]
    fn test_empty_data_handling() {
        let empty_data: &[u8] = b"";

        let compressed = weave_compression_spell(empty_data);
        let reconstructed = unweave_compression_spell(compressed);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≥—Ä–∞–Ω–∏—á–Ω–æ–≥–æ —Å–ª—É—á–∞—è
        assert_eq!(empty_data, reconstructed.as_slice());
    }

    #[test]
    fn test_single_byte_compression() {
        let single_byte = b"A";

        let compressed = weave_compression_spell(single_byte);
        let reconstructed = unweave_compression_spell(compressed);

        assert_eq!(single_byte.as_slice(), reconstructed.as_slice());
    }

    #[test]
    fn test_non_ascii_character_preservation() {
        // Include non-ASCII characters to test extended byte handling
        let mixed_data = b"Caf\xc3\xa9 with non-breaking space\xa0here";

        let compressed = weave_compression_spell(mixed_data);
        let reconstructed = unweave_compression_spell(compressed);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        assert_eq!(mixed_data.as_slice(), reconstructed.as_slice());
    }
}
